pipeline {
    agent any

    environment {
        DB_NAME = 'prod'
        MYSQL_ACCOUNT = credentials('mysql-account')
        REDIS_ACCOUNT = credentials('redis-account')
        JWT_SECRET = credentials('jwt-secret')
        KAKAO_ADMIN_KEY = credentials('kakao-admin-key')
        KAKAO_CLIENT_ID = credentials('kakao-client-id')
        S3_ACCESS_KEY = credentials('s3-access-key')
        S3_SECRET_KEY = credentials('s3-secret-key')
        S3_BUCKET_NAME = 'habitz-prod'
        S3_BUCKET_REGION = 'ap-southeast-2'
        DOCKER_NETWORK = 'npm-network'
        DOCKER_IMAGE_NAME = 'habitz-be'
        SWAGGER_SERVER_URL = 'https://api.habitz.space'
    }

    stages {
        stage('Environment Setup') {
            steps {
                script {
                    env.ENV_TYPE = 'prod'
                }
            }
        }

        stage('Build') {
            steps {
                dir('backend') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'

                    sh 'ls -al ./build'
                }
            }
            post {
                success {
                    echo 'gradle build success'
                }

                failure {
                    echo 'gradle build failed'
                }
            }
        }

        stage('Docker Rm') {
            steps {
                sh 'echo "Docker Rm Start"'
                sh """
                docker ps -a -q --filter "name=${DOCKER_IMAGE_NAME}" \
                    | grep -q . && docker stop ${DOCKER_IMAGE_NAME} && docker rm ${DOCKER_IMAGE_NAME} \
                    | true
                docker rmi -f ${DOCKER_IMAGE_NAME}
                """
            }

            post {
                success {
                    sh 'echo "Docker Rm Success"'
                }
                failure {
                    sh 'echo "Docker Rm Fail"'
                }
            }
        }

        stage('Dockerizing') {
            steps {
                dir('backend') {
                    sh 'echo " Image Bulid Start"'
                    sh "docker build --build-arg SPRING_PROFILES_ACTIVE=${ENV_TYPE} -t ${DOCKER_IMAGE_NAME} ."
                }
            }
            post {
                success {
                    sh 'echo "Build Docker Image Success"'
                }

                failure {
                    sh 'echo "Build Docker Image Fail"'
                }
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                echo JWT_SECRET_KEY=$JWT_SECRET > env.list
                echo REDIS_HOST=$REDIS_HOST >> env.list
                echo REDIS_PORT=$REDIS_PORT >> env.list
                echo REDIS_USER=$REDIS_ACCOUNT_USR >> env.list
                echo REDIS_PWD=$REDIS_ACCOUNT_PSW >> env.list
                echo DB_HOST=$DB_HOST >> env.list
                echo DB_PORT=$DB_PORT >> env.list
                echo DB_NAME=$DB_NAME >> env.list
                echo DB_USERNAME=$MYSQL_ACCOUNT_USR >> env.list
                echo DB_PASSWORD=$MYSQL_ACCOUNT_PSW >> env.list
                echo KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID >> env.list
                echo KAKAO_ADMIN_KEY=$KAKAO_ADMIN_KEY >> env.list
                echo KAKAO_REDIRECT_URI=$KAKAO_REDIRECT_URI >> env.list
                echo S3_ACCESS_KEY=$S3_ACCESS_KEY >> env.list
                echo S3_SECRET_KEY=$S3_SECRET_KEY >> env.list
                echo S3_BUCKET_NAME=$S3_BUCKET_NAME >> env.list
                echo S3_BUCKET_REGION=$S3_BUCKET_REGION >> env.list
                echo SWAGGER_SERVER_URL=$SWAGGER_SERVER_URL >> env.list
                '''

                sh """
                docker run \
                --name ${DOCKER_IMAGE_NAME} \
                --env-file env.list \
                --network ${DOCKER_NETWORK} \
                -d \
                ${DOCKER_IMAGE_NAME}
                """
            }

            post {
                success {
                    echo 'docker run success'
                }

                failure {
                    echo 'docker run failed'
                }
            }
        }
    }

    post {
        success {
            script {
                def authorId = sh(script: 'git show -s --pretty=%an', returnStdout: true).trim()
                def authorName = sh(script: 'git show -s --pretty=%ae', returnStdout: true).trim()
                mattermostSend(
                    color: 'good',
                    icon: 'https://cdn0.iconfinder.com/data/icons/famous-character-vol-1-colored/48/JD-41-512.png',
                    message: "✅ 빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${authorId}(${authorName})\n(<${env.BUILD_URL}|Details>)",
                )
            }
        }
        failure {
            script {
                def authorId = sh(script: 'git show -s --pretty=%an', returnStdout: true).trim()
                def authorName = sh(script: 'git show -s --pretty=%ae', returnStdout: true).trim()
                mattermostSend(
                    color: 'danger',
                    icon: 'https://cdn0.iconfinder.com/data/icons/famous-character-vol-1-colored/48/JD-41-512.png',
                    message: "❌ 빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${authorId}(${authorName})\n(<${env.BUILD_URL}|Details>)",
                )
            }
        }
    }
}
